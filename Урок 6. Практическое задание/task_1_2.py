"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для второго скрипта
"""
from numpy import array
from numpy import append

from memory_profiler import profile

"""
Задание №2 из курса 'Знакомство с языком Python'
Напишите программу, которая принимает на вход число N и выдает набор 
произведений чисел от 1 до N.
"""


# Оригинальное решение
@profile
def factor(n):
    print("Оригинальное решение")
    previous_result = 1
    my_list = []
    for i in range(1, n+1):
        i *= previous_result
        my_list.append(i)
        previous_result = i
    # print(my_list)


# Оптимизированное решение
@profile
def factor_optimized(n):
    print("Оптимизированное решение")

    def wrapped():
        my_list = array([])
        previous_result = 1
        for i in range(1, n+1):
            i *= previous_result
            my_list = append(my_list, i)
            previous_result = i
        yield my_list
    return wrapped()


if __name__ == '__main__':
    print(factor(10000))
    print(factor_optimized(10000))

"""
При больших значениях N удается сэкономить значительное количество памяти
за счет использования функции генератора и numpy.ndarray.
"""