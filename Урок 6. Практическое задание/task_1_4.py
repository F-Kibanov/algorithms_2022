"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для четвертого скрипта
"""
from random import randint

from memory_profiler import profile
import numpy as np
from numpy import array

"""
Задание №4 из курса 'Знакомство с языком Python'
Задайте последовательность чисел. Напишите программу, которая выведет
список неповторяющихся элементов исходной последовательности.
"""


# Оригинальное решение
@profile
def unique(my_list: list) -> list:
    result = [i for i in my_list if my_list.count(i) == 1]
    return result


# Оптимизированное решение
@profile
def unique_optimized(my_array: array) -> array:
    result = array([])
    for i in my_array:
        if np.count_nonzero(my_array == i) == 1:
            result = np.append(result, i)
    return result


if __name__ == '__main__':
    my_list = [randint(0, 100) for i in range(100)]
    my_array = array(my_list)
    print(unique(my_list))
    print(unique_optimized(my_array))


"""
Оптимизировать потребление памяти при помощи numpy.ndarray не получилось,
при увеличении размера входного списка потребление памяти в оптимизированной 
функции может даже превышать потребление исходной..
"""
