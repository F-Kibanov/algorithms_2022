"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


def auth_dict():  # O(1)
    """
    Функция auth_dict для авторизации пользователей и хранения
    отметки активации учетной записи использует два словаря,
    итоговая сложность - O(1).

    """

    login = input()
    password = input()
    act = 1  # Отметка активации учетной записи
    auth_dict = {login: password, 'login1': 'password1', '...': '...'}
    act_dict = {login: act, 'login1': 'act1', '...': '...'}

    if auth_dict.get(login, 'Такого пользователя нет!') == password:  # O(1)
        if act_dict[login]:  # O(1)
            print('Успешная авторизация!')
        else:
            act_dict[login] = input('Для активации нажмите 1')  # O(1)
    else:
        print('Такого пользователя нет!')


def auth_list_common():  # O(n)
    """
    Функция auth_list_common для авторизации пользователей и хранения
    отметки активации учетной записи использует общий список, разделение
    пользователей осуществляется по индексам. Итоговая сложность - O(n).

    """

    login = input()
    password = input()
    act = 1  # Отметка активации учетной записи
    auth_list = [login, password, act, 'login1', 'password1', 'act1', '...']
    try:
        idx = auth_list.index(login)  # O(n)
        if auth_list[idx + 1] == password:  # O(1)
            if auth_list[idx + 2]:  # O(1)
                print('Успешная авторизация!')
            else:
                auth_list[idx + 2] = input('Для активации нажмите 1')
        else:
            print('Неправильный пароль!')
    except ValueError:
        print('Такого пользователя нет!')


def auth_list():  # O(n)
    """
     Функция auth_list является экспериментальной, так как я не уверен,
     что учетные данные пользователей вообще можно хранить в формате
     индивидуальных списков, где имя списка - это логин пользователя,
     а пароль и отметка активации хранятся внутри списка.
    """

    login = input()
    password = input()
    act = 1  # Отметка активации учетной записи
    login = [password, act]  # Поиск нужного списка == O(n)
    if login[0] == password:  # O(1)
        if login[1]:  # O(1)
            print('Успешная авторизация!')
        else:
            login[1] = input('Для активации нажмите 1')  # O(1)
    else:
        print('Такого пользователя нет!')


"""
Наилучшим решением является хранение данных авторизации в словарях
со сложностью O(1), так как словари используют хэшированную структуру. 
В случаях со списками - в функции auth_list_common для хранения данных 
авторизации используется список из логинов, паролей и отметок об активации,
поиск нужного пользователя в нем оценивается как O(n).  
"""